*This is a design document. Not everything described here has already been
implemented.*

xtas is a distributed text analysis system. It uses an Elasticsearch instance
to store documents, Celery to distribute tasks over multiple machines, and it
hides these behind a web API built with Flask.

Tasks are things like POS tagging, named entity recognition, etc. Since these
tasks may depend on each others' outputs, tasks can be strung together in
pipelines. A pipeline consists of:

* an Elasticsearch query that determines the set of documents on which the
  pipeline should work;
* a list of individual tasks that should be performed in order.

The first task fetches the documents from ES and performs work on them. The
next tasks all process their predecessors' output. The final task in the
pipeline stores the full result back into the ES index.

Before executing a task, xtas typechecks the whole pipeline to see if the
input of each task i matches the output of task (i-1). Types are "document"
(required for the first task), "tokenstream" and "any" (only for the last
task in the pipeline). Celery determines where tasks run and how they are
scheduled.
